<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Akshay Mewada</title>
    <description>Sharing my expirence through blogs</description>
    <link>http://localhost:4000/blogs/</link>
    <atom:link href="http://localhost:4000/blogs/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Nov 2022 22:51:41 +0530</pubDate>
    <lastBuildDate>Thu, 24 Nov 2022 22:51:41 +0530</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Two Sum / 2 Sum - Solution using Brute Force and Hash Table</title>
        <description>&lt;p&gt;Given an array of integers array, find two numbers such that they add up to a specific target number.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: [2, 7, 11, 15], target = 9
Output: 0, 1
Input: [5, 4, 17, 3], target = 7
Output: 1, 3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;first-solution--brute-force&quot;&gt;First Solution / Brute Force&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The first option is just to try all the pairs in the array and see if any of them add up to the number target.&lt;/li&gt;
  &lt;li&gt;Since there are n&lt;strong&gt;2 possible pairs, this takes O(n&lt;/strong&gt;2) time in the brute force.&lt;/li&gt;
  &lt;li&gt;The solution uses only O(1) space since no extra space is used or created.&lt;/li&gt;
  &lt;li&gt;This is not a “good” solution because better options exist, but it’s a correct solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def twoSum(array, target): 
    for i in range(len(array)):
        for j in range(i+1,len(array)):
            if array[i]+array[j]==target:
                return [i,j] 
    return []
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;fast-solution--optimized-solution&quot;&gt;Fast Solution / Optimized Solution&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Better than the above option is to create a dictionary (hash table) of all the elements in the array.&lt;/li&gt;
  &lt;li&gt;Now you can scan over the array and check, for each element num(array[i]), whether there’s another element remainder(array[j]) where remainder = target - num is present in the dictionary, then return pair which add up to the target.&lt;/li&gt;
  &lt;li&gt;This one runs in expected time O(n) because n insertions and n lookups in a dictionary take expected time O(n).&lt;/li&gt;
  &lt;li&gt;It uses space O(n). This is considered a “good” solution&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def twoSum(array, target):
    values = {}
    for i, num in enumerate(array):
        remainder = target - num 
        if remainder in values: 
            return [i, values[remainder]] 
        else: 
            values[num] = i 
    return []
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These solutions are very common, you can find more solutions like sort binary search, sliding windows, etc.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blogs/twosum/</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/twosum/</guid>
        
        
        <category>leetcode</category>
        
      </item>
    
  </channel>
</rss>
